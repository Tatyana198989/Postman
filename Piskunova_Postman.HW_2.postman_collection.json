{
	"info": {
		"_postman_id": "f9950cbd-935c-4636-a18e-c5329ef05e33",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18343404"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body( 'This is the first responce from server!');\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"//  let type = typeof(pm.response.text());\r",
							"//  console.log(type)\r",
							"// pm.test(\"Test data type of the response\", () => {\r",
							"//     pm.expect(type).to.be.a('string');\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"user-agent": true,
					"accept": true,
					"accept-encoding": true,
					"connection": true,
					"host": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);           //Статус код 200\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)             // Спарсить response body в json.\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"\r",
							"console.log(jsonData.name)\r",
							"console.log(jsonData.age)\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.) \r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Tanya\");       \r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");       \r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"let req_salary = req.salary\r",
							"let req_age = req.age\r",
							"let req_name = req.name\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);       \r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);       \r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(req.salary));       \r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							" \r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year ).to.eql(req_salary * 4);       \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);              //Статус код 200\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)             // Спарсить response body в js\r",
							"\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"let req_salary = pm.request.url.query.get(\"salary\")\r",
							"let req_age = pm.request.url.query.get(\"age\")\r",
							"let req_name = pm.request.url.query.get(\"name\")\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);       \r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);       \r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(req_salary));       \r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"dog_name\",() => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\") ;\r",
							"}) ;\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"dog_age\",() => {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\") ;\r",
							"}) ;\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"name_Luky\",() => {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\") ;\r",
							"}) ;\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"parametr_age\",() => {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"}) ;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Tanya&age=32&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);              //2.Статус код 200\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)             // 3.Спарсить response body в js\r",
							"\r",
							"\r",
							"//4.Спарсить request\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"correct_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);       \r",
							"});\r",
							"\r",
							"// 6.Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"correct_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(parseInt(req.age));       \r",
							"});\r",
							"\r",
							" //7.Вывести в консоль параметр salary из request.\r",
							"\r",
							"let salary_req = req.salary\r",
							"console.log(salary_req)\r",
							"\r",
							"// 8.Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_0_parametr_is_correct\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(parseInt(req.salary));       \r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_1_parametr_is_correct\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql((req.salary)*2);       \r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_2_parametr_is_correct\", function () {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql((req.salary)*3);       \r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let salary = 0; salary < jsonData.salary.length ; salary++) {\r",
							"console.log(\"Salary = \" + jsonData.salary[salary]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Tanya&age=32&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Parametr_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Parametr_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Parametr_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Parametr_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Parametr_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Parametr_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"\tpm.expect(jsonData.start_qa_salary).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"\tpm.expect(jsonData.qa_salary_after_6_months).to.eql((req.salary)*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"\tpm.expect(jsonData.qa_salary_after_12_months).to.eql((req.salary)*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"\tpm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql((req.salary)*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"\tpm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql((req.salary)*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Person_salary\", function () {\r",
							"\tpm.expect(jsonData.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Person_age\", function () {\r",
							"\tpm.expect(jsonData.person.u_age).to.eql(parseInt(req.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"\tpm.expect(jsonData.person.u_salary_5_years).to.eql((req.salary)*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let key in jsonData.person) {\r",
							"  if(jsonData.person.hasOwnProperty(key)){\r",
							"    console.log(`${key} : ${jsonData.person[key]}`)\r",
							"  }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}